<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Sat Jun 25 19:15:42 2022
<BR><P>
<H3>Maximum Stack Usage =       1936 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ModbusRTUServerClass::poll() &rArr; modbus_reply &rArr; send_msg &rArr; modbus_flush &rArr; Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[123]">__user_initial_stackheap</a>
 <LI><a href="#[5b]">__cxa_pure_virtual</a>
 <LI><a href="#[261]">abort_message</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">ADC_DAC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_DAC_IRQHandler</a><BR>
 <LI><a href="#[146]">LLA_UART_Printf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[147]">LLA_errorCode_Handler</a><BR>
 <LI><a href="#[16a]">LLA_UART_WriteBuffer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[147]">LLA_errorCode_Handler</a><BR>
 <LI><a href="#[15f]">get_uart</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[147]">LLA_errorCode_Handler</a><BR>
 <LI><a href="#[1ff]">T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ff]">T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const</a><BR>
 <LI><a href="#[213]">ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ff]">T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_DAC_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[22]">CAN_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[25]">CLKTRIM_CTS_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[a]">DMAC_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[24]">FLASH_RAM_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[12]">I2C0_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[13]">I2C1_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[23]">LCD_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[17]">LPTIM0_1_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[e]">LPUART0_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[f]">LPUART1_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[1b]">PCA_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[1f]">PCNT_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[6]">PORTA_IRQHandler</a> from lla_exti.o(.text.PORTA_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[7]">PORTB_IRQHandler</a> from lla_exti.o(.text.PORTB_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[8]">PORTC_E_IRQHandler</a> from lla_exti.o(.text.PORTC_E_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[9]">PORTD_F_IRQHandler</a> from lla_exti.o(.text.PORTD_F_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[10]">SPI0_I2S0_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[11]">SPI1_I2S1_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from lla_sys_time.o(.text.SysTick_Handler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_hc32l19x.o(.text.SystemInit) referenced from startup_hc32l19x.o(.text)
 <LI><a href="#[14]">TIM0_IRQHandler</a> from lla_timer.o(.text.TIM0_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[15]">TIM1_IRQHandler</a> from lla_timer.o(.text.TIM1_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[16]">TIM2_IRQHandler</a> from lla_timer.o(.text.TIM2_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[b]">TIM3_IRQHandler</a> from lla_advanceio.o(.text.TIM3_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[18]">TIM4_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[19]">TIM5_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[1a]">TIM6_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[c]">UART0_2_IRQHandler</a> from lla_uart.o(.text.UART0_2_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[d]">UART1_3_IRQHandler</a> from lla_uart.o(.text.UART1_3_IRQHandler) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[21]">USBFS_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[20]">VC0_1_2_LVD_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[1c]">WDT_IRQHandler</a> from startup_hc32l19x.o(.text) referenced from startup_hc32l19x.o(RESET)
 <LI><a href="#[7c]">_GLOBAL__sub_I_Adafruit_MQTT_Client.cpp</a> from adafruit_mqtt_client.o(.text._GLOBAL__sub_I_Adafruit_MQTT_Client.cpp) referenced from adafruit_mqtt_client.o(.init_array)
 <LI><a href="#[70]">_GLOBAL__sub_I_Dhcp.cpp</a> from dhcp.o(.text._GLOBAL__sub_I_Dhcp.cpp) referenced from dhcp.o(.init_array)
 <LI><a href="#[71]">_GLOBAL__sub_I_Dns.cpp</a> from dns.o(.text._GLOBAL__sub_I_Dns.cpp) referenced from dns.o(.init_array)
 <LI><a href="#[72]">_GLOBAL__sub_I_Ethernet.cpp</a> from ethernet.o(.text._GLOBAL__sub_I_Ethernet.cpp) referenced from ethernet.o(.init_array)
 <LI><a href="#[73]">_GLOBAL__sub_I_EthernetClient.cpp</a> from ethernetclient.o(.text._GLOBAL__sub_I_EthernetClient.cpp) referenced from ethernetclient.o(.init_array)
 <LI><a href="#[74]">_GLOBAL__sub_I_EthernetServer.cpp</a> from ethernetserver.o(.text._GLOBAL__sub_I_EthernetServer.cpp) referenced from ethernetserver.o(.init_array)
 <LI><a href="#[75]">_GLOBAL__sub_I_EthernetUdp.cpp</a> from ethernetudp.o(.text._GLOBAL__sub_I_EthernetUdp.cpp) referenced from ethernetudp.o(.init_array)
 <LI><a href="#[6c]">_GLOBAL__sub_I_HardwareSerial.cpp</a> from hardwareserial.o(.text._GLOBAL__sub_I_HardwareSerial.cpp) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[6d]">_GLOBAL__sub_I_IPAddress.cpp</a> from ipaddress.o(.text._GLOBAL__sub_I_IPAddress.cpp) referenced from ipaddress.o(.init_array)
 <LI><a href="#[78]">_GLOBAL__sub_I_ModbusRTUClient.cpp</a> from modbusrtuclient.o(.text._GLOBAL__sub_I_ModbusRTUClient.cpp) referenced from modbusrtuclient.o(.init_array)
 <LI><a href="#[79]">_GLOBAL__sub_I_ModbusRTUServer.cpp</a> from modbusrtuserver.o(.text._GLOBAL__sub_I_ModbusRTUServer.cpp) referenced from modbusrtuserver.o(.init_array)
 <LI><a href="#[7a]">_GLOBAL__sub_I_ModbusTCPClient.cpp</a> from modbustcpclient.o(.text._GLOBAL__sub_I_ModbusTCPClient.cpp) referenced from modbustcpclient.o(.init_array)
 <LI><a href="#[7b]">_GLOBAL__sub_I_ModbusTCPServer.cpp</a> from modbustcpserver.o(.text._GLOBAL__sub_I_ModbusTCPServer.cpp) referenced from modbustcpserver.o(.init_array)
 <LI><a href="#[7d]">_GLOBAL__sub_I_NTPClient.cpp</a> from ntpclient.o(.text._GLOBAL__sub_I_NTPClient.cpp) referenced from ntpclient.o(.init_array)
 <LI><a href="#[6e]">_GLOBAL__sub_I_Wire.cpp</a> from wire.o(.text._GLOBAL__sub_I_Wire.cpp) referenced from wire.o(.init_array)
 <LI><a href="#[6b]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[77]">_GLOBAL__sub_I_modbus_tcp.cpp</a> from modbus-tcp.o(.text._GLOBAL__sub_I_modbus_tcp.cpp) referenced from modbus-tcp.o(.init_array)
 <LI><a href="#[76]">_GLOBAL__sub_I_socket.cpp</a> from socket.o(.text._GLOBAL__sub_I_socket.cpp) referenced from socket.o(.init_array)
 <LI><a href="#[6f]">_GLOBAL__sub_I_w5100.cpp</a> from w5100.o(.text._GLOBAL__sub_I_w5100.cpp) referenced from w5100.o(.init_array)
 <LI><a href="#[57]">RS485Class::end()</a> from rs485.o(.text._ZN10RS485Class3endEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[52]">RS485Class::peek()</a> from rs485.o(.text._ZN10RS485Class4peekEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[51]">RS485Class::read()</a> from rs485.o(.text._ZN10RS485Class4readEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[53]">RS485Class::begin(unsigned long)</a> from rs485.o(.text._ZN10RS485Class5beginEm) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[55]">RS485Class::begin(unsigned long, int, int)</a> from rs485.o(.text._ZN10RS485Class5beginEmii) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[54]">RS485Class::begin(unsigned long, unsigned short)</a> from rs485.o(.text._ZN10RS485Class5beginEmt) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[56]">RS485Class::begin(unsigned long, unsigned short, int, int)</a> from rs485.o(.text._ZN10RS485Class5beginEmtii) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[4f]">RS485Class::flush()</a> from rs485.o(.text._ZN10RS485Class5flushEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[31]">RS485Class::write(unsigned char)</a> from rs485.o(.text._ZN10RS485Class5writeEh) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[50]">RS485Class::available()</a> from rs485.o(.text._ZN10RS485Class9availableEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[58]">RS485Class::operator bool()</a> from rs485.o(.text._ZN10RS485ClasscvbEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[5a]">ModbusClient::~ModbusClient__deallocating()</a> from modbusclient.o(.text._ZN12ModbusClientD0Ev) referenced from modbusclient.o(.rodata._ZTV12ModbusClient)
 <LI><a href="#[59]">ModbusClient::~ModbusClient__sub_object()</a> from modbusclient.o(.text._ZN12ModbusClientD2Ev) referenced from modbusclient.o(.rodata._ZTV12ModbusClient)
 <LI><a href="#[5d]">ModbusServer::~ModbusServer__deallocating()</a> from modbusserver.o(.text._ZN12ModbusServerD0Ev) referenced from modbusserver.o(.rodata._ZTV12ModbusServer)
 <LI><a href="#[5c]">ModbusServer::~ModbusServer__sub_object()</a> from modbusserver.o(.text._ZN12ModbusServerD2Ev) referenced from modbusserver.o(.rodata._ZTV12ModbusServer)
 <LI><a href="#[62]">HardwareSerial::peek()</a> from hardwareserial.o(.text._ZN14HardwareSerial4peekEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[61]">HardwareSerial::read()</a> from hardwareserial.o(.text._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[5f]">HardwareSerial::flush()</a> from hardwareserial.o(.text._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[5e]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(.text._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[60]">HardwareSerial::available()</a> from hardwareserial.o(.text._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[63]">ModbusRTUClientClass::~ModbusRTUClientClass__deallocating()</a> from modbusrtuclient.o(.text._ZN20ModbusRTUClientClassD0Ev) referenced from modbusrtuclient.o(.rodata._ZTV20ModbusRTUClientClass)
 <LI><a href="#[2d]">ModbusRTUClientClass::~ModbusRTUClientClass__sub_object()</a> from modbusrtuclient.o(.text._ZN20ModbusRTUClientClassD2Ev) referenced from modbusrtuclient.o(.rodata._ZTV20ModbusRTUClientClass)
 <LI><a href="#[2d]">ModbusRTUClientClass::~ModbusRTUClientClass__sub_object()</a> from modbusrtuclient.o(.text._ZN20ModbusRTUClientClassD2Ev) referenced from modbusrtuclient.o(.text.__cxx_global_var_init)
 <LI><a href="#[64]">ModbusRTUServerClass::poll()</a> from modbusrtuserver.o(.text._ZN20ModbusRTUServerClass4pollEv) referenced from modbusrtuserver.o(.rodata._ZTV20ModbusRTUServerClass)
 <LI><a href="#[65]">ModbusRTUServerClass::~ModbusRTUServerClass__deallocating()</a> from modbusrtuserver.o(.text._ZN20ModbusRTUServerClassD0Ev) referenced from modbusrtuserver.o(.rodata._ZTV20ModbusRTUServerClass)
 <LI><a href="#[2e]">ModbusRTUServerClass::~ModbusRTUServerClass__sub_object()</a> from modbusrtuserver.o(.text._ZN20ModbusRTUServerClassD2Ev) referenced from modbusrtuserver.o(.rodata._ZTV20ModbusRTUServerClass)
 <LI><a href="#[2e]">ModbusRTUServerClass::~ModbusRTUServerClass__sub_object()</a> from modbusrtuserver.o(.text._ZN20ModbusRTUServerClassD2Ev) referenced from modbusrtuserver.o(.text.__cxx_global_var_init)
 <LI><a href="#[66]">Print::flush()</a> from hardwareserial.o(.text._ZN5Print5flushEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[66]">Print::flush()</a> from hardwareserial.o(.text._ZN5Print5flushEv) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[3f]">Print::print(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print5printEPK19__FlashStringHelper) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[3f]">Print::print(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print5printEPK19__FlashStringHelper) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[3f]">Print::print(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print5printEPK19__FlashStringHelper) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[3f]">Print::print(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print5printEPK19__FlashStringHelper) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[36]">Print::print(const char*)</a> from print.o(.text._ZN5Print5printEPKc) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[36]">Print::print(const char*)</a> from print.o(.text._ZN5Print5printEPKc) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[36]">Print::print(const char*)</a> from print.o(.text._ZN5Print5printEPKc) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[36]">Print::print(const char*)</a> from print.o(.text._ZN5Print5printEPKc) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[34]">Print::print(const String&)</a> from print.o(.text._ZN5Print5printERK6String) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[34]">Print::print(const String&)</a> from print.o(.text._ZN5Print5printERK6String) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[34]">Print::print(const String&)</a> from print.o(.text._ZN5Print5printERK6String) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[34]">Print::print(const String&)</a> from print.o(.text._ZN5Print5printERK6String) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[40]">Print::print(const Printable&)</a> from print.o(.text._ZN5Print5printERK9Printable) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[40]">Print::print(const Printable&)</a> from print.o(.text._ZN5Print5printERK9Printable) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[40]">Print::print(const Printable&)</a> from print.o(.text._ZN5Print5printERK9Printable) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[40]">Print::print(const Printable&)</a> from print.o(.text._ZN5Print5printERK9Printable) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[35]">Print::print(char)</a> from print.o(.text._ZN5Print5printEc) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[35]">Print::print(char)</a> from print.o(.text._ZN5Print5printEc) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[35]">Print::print(char)</a> from print.o(.text._ZN5Print5printEc) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[35]">Print::print(char)</a> from print.o(.text._ZN5Print5printEc) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[3e]">Print::print(double, int)</a> from print.o(.text._ZN5Print5printEdi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[3e]">Print::print(double, int)</a> from print.o(.text._ZN5Print5printEdi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[3e]">Print::print(double, int)</a> from print.o(.text._ZN5Print5printEdi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[3e]">Print::print(double, int)</a> from print.o(.text._ZN5Print5printEdi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[37]">Print::print(unsigned char, int)</a> from print.o(.text._ZN5Print5printEhi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[37]">Print::print(unsigned char, int)</a> from print.o(.text._ZN5Print5printEhi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[37]">Print::print(unsigned char, int)</a> from print.o(.text._ZN5Print5printEhi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[37]">Print::print(unsigned char, int)</a> from print.o(.text._ZN5Print5printEhi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[38]">Print::print(int, int)</a> from print.o(.text._ZN5Print5printEii) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[38]">Print::print(int, int)</a> from print.o(.text._ZN5Print5printEii) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[38]">Print::print(int, int)</a> from print.o(.text._ZN5Print5printEii) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[38]">Print::print(int, int)</a> from print.o(.text._ZN5Print5printEii) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[39]">Print::print(unsigned, int)</a> from print.o(.text._ZN5Print5printEji) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[39]">Print::print(unsigned, int)</a> from print.o(.text._ZN5Print5printEji) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[39]">Print::print(unsigned, int)</a> from print.o(.text._ZN5Print5printEji) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[39]">Print::print(unsigned, int)</a> from print.o(.text._ZN5Print5printEji) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[3a]">Print::print(long, int)</a> from print.o(.text._ZN5Print5printEli) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[3a]">Print::print(long, int)</a> from print.o(.text._ZN5Print5printEli) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[3a]">Print::print(long, int)</a> from print.o(.text._ZN5Print5printEli) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[3a]">Print::print(long, int)</a> from print.o(.text._ZN5Print5printEli) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[3b]">Print::print(unsigned long, int)</a> from print.o(.text._ZN5Print5printEmi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[3b]">Print::print(unsigned long, int)</a> from print.o(.text._ZN5Print5printEmi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[3b]">Print::print(unsigned long, int)</a> from print.o(.text._ZN5Print5printEmi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[3b]">Print::print(unsigned long, int)</a> from print.o(.text._ZN5Print5printEmi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[3c]">Print::print(long long, int)</a> from print.o(.text._ZN5Print5printExi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[3c]">Print::print(long long, int)</a> from print.o(.text._ZN5Print5printExi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[3c]">Print::print(long long, int)</a> from print.o(.text._ZN5Print5printExi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[3c]">Print::print(long long, int)</a> from print.o(.text._ZN5Print5printExi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[3d]">Print::print(unsigned long long, int)</a> from print.o(.text._ZN5Print5printEyi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[3d]">Print::print(unsigned long long, int)</a> from print.o(.text._ZN5Print5printEyi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[3d]">Print::print(unsigned long long, int)</a> from print.o(.text._ZN5Print5printEyi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[3d]">Print::print(unsigned long long, int)</a> from print.o(.text._ZN5Print5printEyi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[32]">Print::write(const char*)</a> from print.o(.text._ZN5Print5writeEPKc) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[32]">Print::write(const char*)</a> from print.o(.text._ZN5Print5writeEPKc) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[32]">Print::write(const char*)</a> from print.o(.text._ZN5Print5writeEPKc) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[32]">Print::write(const char*)</a> from print.o(.text._ZN5Print5writeEPKc) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[33]">Print::write(const void*, unsigned)</a> from print.o(.text._ZN5Print5writeEPKvj) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[33]">Print::write(const void*, unsigned)</a> from print.o(.text._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[33]">Print::write(const void*, unsigned)</a> from print.o(.text._ZN5Print5writeEPKvj) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[33]">Print::write(const void*, unsigned)</a> from print.o(.text._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[4d]">Print::println(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print7printlnEPK19__FlashStringHelper) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[4d]">Print::println(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print7printlnEPK19__FlashStringHelper) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[4d]">Print::println(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print7printlnEPK19__FlashStringHelper) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[4d]">Print::println(const __FlashStringHelper*)</a> from print.o(.text._ZN5Print7printlnEPK19__FlashStringHelper) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[44]">Print::println(const char*)</a> from print.o(.text._ZN5Print7printlnEPKc) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[44]">Print::println(const char*)</a> from print.o(.text._ZN5Print7printlnEPKc) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[44]">Print::println(const char*)</a> from print.o(.text._ZN5Print7printlnEPKc) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[44]">Print::println(const char*)</a> from print.o(.text._ZN5Print7printlnEPKc) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[42]">Print::println(const String&)</a> from print.o(.text._ZN5Print7printlnERK6String) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[42]">Print::println(const String&)</a> from print.o(.text._ZN5Print7printlnERK6String) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[42]">Print::println(const String&)</a> from print.o(.text._ZN5Print7printlnERK6String) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[42]">Print::println(const String&)</a> from print.o(.text._ZN5Print7printlnERK6String) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[4e]">Print::println(const Printable&)</a> from print.o(.text._ZN5Print7printlnERK9Printable) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[4e]">Print::println(const Printable&)</a> from print.o(.text._ZN5Print7printlnERK9Printable) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[4e]">Print::println(const Printable&)</a> from print.o(.text._ZN5Print7printlnERK9Printable) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[4e]">Print::println(const Printable&)</a> from print.o(.text._ZN5Print7printlnERK9Printable) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[43]">Print::println(char)</a> from print.o(.text._ZN5Print7printlnEc) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[43]">Print::println(char)</a> from print.o(.text._ZN5Print7printlnEc) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[43]">Print::println(char)</a> from print.o(.text._ZN5Print7printlnEc) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[43]">Print::println(char)</a> from print.o(.text._ZN5Print7printlnEc) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[4c]">Print::println(double, int)</a> from print.o(.text._ZN5Print7printlnEdi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[4c]">Print::println(double, int)</a> from print.o(.text._ZN5Print7printlnEdi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[4c]">Print::println(double, int)</a> from print.o(.text._ZN5Print7printlnEdi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[4c]">Print::println(double, int)</a> from print.o(.text._ZN5Print7printlnEdi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[45]">Print::println(unsigned char, int)</a> from print.o(.text._ZN5Print7printlnEhi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[45]">Print::println(unsigned char, int)</a> from print.o(.text._ZN5Print7printlnEhi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[45]">Print::println(unsigned char, int)</a> from print.o(.text._ZN5Print7printlnEhi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[45]">Print::println(unsigned char, int)</a> from print.o(.text._ZN5Print7printlnEhi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[46]">Print::println(int, int)</a> from print.o(.text._ZN5Print7printlnEii) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[46]">Print::println(int, int)</a> from print.o(.text._ZN5Print7printlnEii) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[46]">Print::println(int, int)</a> from print.o(.text._ZN5Print7printlnEii) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[46]">Print::println(int, int)</a> from print.o(.text._ZN5Print7printlnEii) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[47]">Print::println(unsigned, int)</a> from print.o(.text._ZN5Print7printlnEji) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[47]">Print::println(unsigned, int)</a> from print.o(.text._ZN5Print7printlnEji) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[47]">Print::println(unsigned, int)</a> from print.o(.text._ZN5Print7printlnEji) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[47]">Print::println(unsigned, int)</a> from print.o(.text._ZN5Print7printlnEji) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[48]">Print::println(long, int)</a> from print.o(.text._ZN5Print7printlnEli) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[48]">Print::println(long, int)</a> from print.o(.text._ZN5Print7printlnEli) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[48]">Print::println(long, int)</a> from print.o(.text._ZN5Print7printlnEli) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[48]">Print::println(long, int)</a> from print.o(.text._ZN5Print7printlnEli) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[49]">Print::println(unsigned long, int)</a> from print.o(.text._ZN5Print7printlnEmi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[49]">Print::println(unsigned long, int)</a> from print.o(.text._ZN5Print7printlnEmi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[49]">Print::println(unsigned long, int)</a> from print.o(.text._ZN5Print7printlnEmi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[49]">Print::println(unsigned long, int)</a> from print.o(.text._ZN5Print7printlnEmi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[41]">Print::println()</a> from print.o(.text._ZN5Print7printlnEv) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[41]">Print::println()</a> from print.o(.text._ZN5Print7printlnEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[41]">Print::println()</a> from print.o(.text._ZN5Print7printlnEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[41]">Print::println()</a> from print.o(.text._ZN5Print7printlnEv) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[4a]">Print::println(long long, int)</a> from print.o(.text._ZN5Print7printlnExi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[4a]">Print::println(long long, int)</a> from print.o(.text._ZN5Print7printlnExi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[4a]">Print::println(long long, int)</a> from print.o(.text._ZN5Print7printlnExi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[4a]">Print::println(long long, int)</a> from print.o(.text._ZN5Print7printlnExi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[4b]">Print::println(unsigned long long, int)</a> from print.o(.text._ZN5Print7printlnEyi) referenced from rs485.o(.rodata._ZTV10RS485Class)
 <LI><a href="#[4b]">Print::println(unsigned long long, int)</a> from print.o(.text._ZN5Print7printlnEyi) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[4b]">Print::println(unsigned long long, int)</a> from print.o(.text._ZN5Print7printlnEyi) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[4b]">Print::println(unsigned long long, int)</a> from print.o(.text._ZN5Print7printlnEyi) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[68]">TwoWire::begin(unsigned char)</a> from wire.o(.text._ZN7TwoWire5beginEh) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[67]">TwoWire::process()</a> from wire.o(.text._ZN7TwoWire7processEv) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[2c]">TwoWire::~TwoWire__sub_object()</a> from wire.o(.text._ZN7TwoWireD2Ev) referenced from wire.o(.text.__cxx_global_var_init)
 <LI><a href="#[69]">WireBase::begin(unsigned char)</a> from wirebase.o(.text._ZN8WireBase5beginEh) referenced from wirebase.o(.rodata._ZTV8WireBase)
 <LI><a href="#[6a]">IPAddress::printTo(Print&) const</a> from ipaddress.o(.text._ZNK9IPAddress7printToER5Print) referenced from ipaddress.o(.rodata._ZTV9IPAddress)
 <LI><a href="#[5b]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from modbusserver.o(.rodata._ZTV12ModbusServer)
 <LI><a href="#[5b]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[5b]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[5b]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from wirebase.o(.rodata._ZTV8WireBase)
 <LI><a href="#[5b]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from ipaddress.o(.rodata._ZTV9Printable)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_hc32l19x.o(.text)
 <LI><a href="#[28]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2f]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[30]">_printf_fp_hex_real</a> from _printf_fp_hex.o(.text) referenced from printf2.o(x$fpl$printf2)
 <LI><a href="#[2a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[29]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[2b]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[81]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[291]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[292]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[293]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d6]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[83]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[84]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[86]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[88]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[8a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[8b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[8c]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[8e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[8f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[91]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[92]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[93]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[95]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[97]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[99]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[9a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[9b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[9d]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[9f]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[a0]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a2]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a4]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[b9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[294]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[295]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[296]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[297]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[298]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[299]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[29a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[29b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[29c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[29d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[29e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[29f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2a0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2a2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[af]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2a4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2a5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2a6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2a7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2a9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2aa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2ab]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2ac]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2ad]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2ae]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2af]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[80]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2b0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2b1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ba]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; setup() &rArr; unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&) &rArr; unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&) &rArr; unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3) &rArr; T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[12e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2b3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bf]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2b4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DAC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DAC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CLKTRIM_CTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_RAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LPTIM0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PCNT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_I2S1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VC0_1_2_LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l19x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l19x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c1]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_receive
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_flush
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_connect
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_error_print
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[2b5]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::DefaultAllocator::allocate(unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[c5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::DefaultAllocator::deallocate(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::~ModbusClient()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServer::~ModbusServer()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>

<P><STRONG><a name="[2b7]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>

<P><STRONG><a name="[2b8]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>vfprintf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_exception
</UL>

<P><STRONG><a name="[c8]"></a>vsnprintf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_fprintf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::vPrint(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[cb]"></a>__2snprintf</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::printTimestamp()
</UL>

<P><STRONG><a name="[cd]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[ce]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[cc]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[90]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[d3]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[96]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9e]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[87]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[d4]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d7]"></a>__cxa_atexit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1f6]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*)
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
</UL>

<P><STRONG><a name="[2b9]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[db]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>

<P><STRONG><a name="[2ba]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_fprintf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServer::ModbusServer__sub_object()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[2bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e4]"></a>strcmp</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, strcmpv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::safe_strcmp(const char*, const char*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[2bc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;double, void&rang;::toJson(double, ArduinoJson6185_11::VariantRef)
</UL>

<P><STRONG><a name="[2bf]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[df]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[e2]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2c0]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[e5]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[e4]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2c1]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2c2]"></a>_ll_sfrom_d</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, dfixl.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2c3]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[2c4]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2c5]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>

<P><STRONG><a name="[2c6]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[2c7]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[2c8]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_best_clk_div
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[ed]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[ec]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[2c9]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[2ca]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_best_clk_div
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[2cb]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2cd]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[ab]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[2ce]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f2]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a9]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f4]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2d2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[30]"></a>_printf_fp_hex_real</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(x$fpl$printf2)
</UL>
<P><STRONG><a name="[c9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[ca]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[29]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a3]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c7]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>

<P><STRONG><a name="[101]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[98]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[103]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[9c]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[b0]"></a>_initio</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[b5]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[109]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[d1]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[132]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[c0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[10b]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[f1]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2d3]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fc]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[10c]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a5]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a7]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[f6]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[110]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[f8]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[112]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[100]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[107]"></a>setvbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[105]"></a>freopen</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[115]"></a>fopen</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[108]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[2d4]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_c16rtomb</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[102]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b3]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[10a]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[106]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f3]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[11d]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[120]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[2d5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[124]"></a>__flsbuf</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[28c]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2d8]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[2d9]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[129]"></a>_writebuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[116]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[125]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[bc]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11a]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[119]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[11b]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[11c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[11e]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[11f]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[121]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[12a]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[2da]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[130]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[133]"></a>Adc_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, adc.o(.text.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adc_Init &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_ADC_Init
</UL>

<P><STRONG><a name="[135]"></a>Bgr_BgrEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bgr.o(.text.Bgr_BgrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bgr_BgrEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_ADC_Init
</UL>

<P><STRONG><a name="[136]"></a>Bgr_TempSensorEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bgr.o(.text.Bgr_TempSensorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bgr_TempSensorEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_ADC_Init
</UL>

<P><STRONG><a name="[182]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt.o(.text.Bt_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERx_Handler
</UL>

<P><STRONG><a name="[181]"></a>Bt_GetIntFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt.o(.text.Bt_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERx_Handler
</UL>

<P><STRONG><a name="[137]"></a>Debug_fprintf</STRONG> (Thumb, 88 bytes, Stack size 1056 bytes, debug_wrapper.o(.text.Debug_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = Debug_fprintf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::print(int, const char*, ...)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_error_print
</UL>

<P><STRONG><a name="[139]"></a>Debug_printf</STRONG> (Thumb, 100 bytes, Stack size 1056 bytes, debug_wrapper.o(.text.Debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::print(int, const char*, ...)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_flush
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[14e]"></a>Flash_Init</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, flash.o(.text.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_Flash_Init
</UL>

<P><STRONG><a name="[157]"></a>Flash_WaitCycle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, flash.o(.text.Flash_WaitCycle))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
</UL>

<P><STRONG><a name="[13d]"></a>GetBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ddl.o(.text.GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
</UL>

<P><STRONG><a name="[13a]"></a>Gpio_ClearIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(.text.Gpio_ClearIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_ClearIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>Gpio_GetInputIO</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.Gpio_GetInputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_GetInputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
</UL>

<P><STRONG><a name="[13e]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.Gpio_GetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>Gpio_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gpio.o(.text.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[14a]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text.Gpio_SetAfMode))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[140]"></a>Gpio_WriteOutputIO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(.text.Gpio_WriteOutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_WriteOutputIO
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
</UL>

<P><STRONG><a name="[145]"></a>LAA_errorInfo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lla_errorcode.o(.text.LAA_errorInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LAA_errorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_Flash_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_WriteBuffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
</UL>

<P><STRONG><a name="[141]"></a>LLA_ADC_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lla_adc.o(.text.LLA_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LLA_ADC_Init &rArr; Adc_Init &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_TempSensorEnable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_BgrEnable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[144]"></a>LLA_BaseIO_Mode</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, lla_baseio.o(.text.LLA_BaseIO_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = LLA_BaseIO_Mode &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[14b]"></a>LLA_BaseIO_ReadInput</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lla_baseio.o(.text.LLA_BaseIO_ReadInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LLA_BaseIO_ReadInput &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>

<P><STRONG><a name="[14c]"></a>LLA_BaseIO_Write</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lla_baseio.o(.text.LLA_BaseIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>

<P><STRONG><a name="[14d]"></a>LLA_Flash_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lla_flash.o(.text.LLA_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LLA_Flash_Init &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[14f]"></a>LLA_PWM_BaseHZ</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lla_pwm.o(.text.LLA_PWM_BaseHZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LLA_PWM_BaseHZ &rArr; timer3_init &rArr; get_best_clk_div &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[16d]"></a>LLA_SYS_IRQ_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lla_sys_irq.o(.text.LLA_SYS_IRQ_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
</UL>

<P><STRONG><a name="[151]"></a>LLA_SYS_Time_ConsumeMillis</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lla_sys_time.o(.text.LLA_SYS_Time_ConsumeMillis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LLA_SYS_Time_ConsumeMillis
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_DelayMS
</UL>

<P><STRONG><a name="[153]"></a>LLA_SYS_Time_DelayMS</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lla_sys_time.o(.text.LLA_SYS_Time_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLA_SYS_Time_DelayMS &rArr; LLA_SYS_Time_ConsumeMillis
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_Millis
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_ConsumeMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[26d]"></a>LLA_SYS_Time_DelayUS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lla_sys_time.o(.text.LLA_SYS_Time_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LLA_SYS_Time_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>

<P><STRONG><a name="[270]"></a>LLA_SYS_Time_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lla_sys_time.o(.text.LLA_SYS_Time_Init))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[152]"></a>LLA_SYS_Time_Millis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lla_sys_time.o(.text.LLA_SYS_Time_Millis))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_ConsumeMillis
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_DelayMS
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>

<P><STRONG><a name="[154]"></a>LLA_SYS_clock_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lla_sys_clock.o(.text.LLA_SYS_clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LLA_SYS_clock_Init &rArr; Sysctrl_ClkInit &rArr; Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[159]"></a>LLA_SYS_clock_Update</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lla_sys_clock.o(.text.LLA_SYS_clock_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LLA_SYS_clock_Update &rArr; Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
</UL>

<P><STRONG><a name="[15b]"></a>LLA_UART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwareserial.o(.text.LLA_UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LLA_UART1_IRQHandler &rArr; HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>LLA_UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lla_uart.o(.text.LLA_UART2_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>LLA_UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lla_uart.o(.text.LLA_UART3_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>LLA_UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwareserial.o(.text.LLA_UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LLA_UART4_IRQHandler &rArr; HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>LLA_UART_DeInit</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lla_uart.o(.text.LLA_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LLA_UART_DeInit &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RstPeripheral0
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RstPeripheral1
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::end()
</UL>

<P><STRONG><a name="[162]"></a>LLA_UART_Init</STRONG> (Thumb, 692 bytes, Stack size 80 bytes, lla_uart.o(.text.LLA_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = LLA_UART_Init &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config)
</UL>

<P><STRONG><a name="[146]"></a>LLA_UART_Printf</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lla_uart.o(.text.LLA_UART_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_WriteBuffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_Flash_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_WriteBuffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
</UL>

<P><STRONG><a name="[16b]"></a>LLA_UART_Write</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lla_uart.o(.text.LLA_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LLA_UART_Write &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[16a]"></a>LLA_UART_WriteBuffer</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lla_uart.o(.text.LLA_UART_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = LLA_UART_WriteBuffer &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
</UL>

<P><STRONG><a name="[147]"></a>LLA_errorCode_Handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lla_errorcode.o(.text.LLA_errorCode_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_IRQ_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_port
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_Flash_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_WriteBuffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart
</UL>

<P><STRONG><a name="[6]"></a>PORTA_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lla_exti.o(.text.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORTA_IRQHandler &rArr; PORTX_IRQHandler &rArr; Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PORTB_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lla_exti.o(.text.PORTB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORTB_IRQHandler &rArr; PORTX_IRQHandler &rArr; Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PORTC_E_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lla_exti.o(.text.PORTC_E_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORTC_E_IRQHandler &rArr; PORTX_IRQHandler &rArr; Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PORTD_F_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lla_exti.o(.text.PORTD_F_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORTD_F_IRQHandler &rArr; PORTX_IRQHandler &rArr; Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>Reset_RstPeripheral0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, reset.o(.text.Reset_RstPeripheral0))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
</UL>

<P><STRONG><a name="[161]"></a>Reset_RstPeripheral1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, reset.o(.text.Reset_RstPeripheral1))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
</UL>

<P><STRONG><a name="[13b]"></a>SetBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ddl.o(.text.SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_WriteOutputIO
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lla_sys_time.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>Sysctrl_ClkDeInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sysctrl.o(.text.Sysctrl_ClkDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_ClkDeInit &rArr; Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
</UL>

<P><STRONG><a name="[158]"></a>Sysctrl_ClkInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sysctrl.o(.text.Sysctrl_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_ClkInit &rArr; Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTLDriverCfg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverCfg
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTLStableTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLStableTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
</UL>

<P><STRONG><a name="[171]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, sysctrl.o(.text.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
</UL>

<P><STRONG><a name="[15a]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, sysctrl.o(.text.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
</UL>

<P><STRONG><a name="[163]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[173]"></a>Sysctrl_SetHCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_SetHCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetHCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
</UL>

<P><STRONG><a name="[174]"></a>Sysctrl_SetPCLKDiv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
</UL>

<P><STRONG><a name="[155]"></a>Sysctrl_SetPLLFreq</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, sysctrl.o(.text.Sysctrl_SetPLLFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sysctrl_SetPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
</UL>

<P><STRONG><a name="[17a]"></a>Sysctrl_SetPLLStableTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetPLLStableTime))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[143]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sysctrl.o(.text.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetPeripheralGate
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_ADC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
</UL>

<P><STRONG><a name="[170]"></a>Sysctrl_SetRCHTrim</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetRCHTrim))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
</UL>

<P><STRONG><a name="[177]"></a>Sysctrl_SetRCLStableTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetRCLStableTime))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[176]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetXTHStableTime))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[179]"></a>Sysctrl_SetXTLStableTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_SetXTLStableTime))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[172]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SysClkSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkDeInit
</UL>

<P><STRONG><a name="[175]"></a>Sysctrl_XTHDriverCfg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(.text.Sysctrl_XTHDriverCfg))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[178]"></a>Sysctrl_XTLDriverCfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysctrl.o(.text.Sysctrl_XTLDriverCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_XTLDriverCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[17c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_hc32l19x.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_hc32l19x.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lla_timer.o(.text.TIM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM0_IRQHandler &rArr; TIMERx_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lla_timer.o(.text.TIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_IRQHandler &rArr; TIMERx_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lla_timer.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; TIMERx_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lla_advanceio.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M1_PWC_CapValueGet
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_GetIntFlag
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>Tim3_ClearAllIntFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_ClearAllIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[17f]"></a>Tim3_ClearIntFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>Tim3_GetIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>Tim3_M1_PWC_CapValueGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_M1_PWC_CapValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>Tim3_M23_ARRSet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer3.o(.text.Tim3_M23_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3_M23_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[27d]"></a>Tim3_M23_Cnt16Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_M23_Cnt16Set))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[27f]"></a>Tim3_M23_Run</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_M23_Run))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[27c]"></a>Tim3_M23_SetValidPeriod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer3.o(.text.Tim3_M23_SetValidPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[27a]"></a>Tim3_Mode23_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, timer3.o(.text.Tim3_Mode23_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tim3_Mode23_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[c]"></a>UART0_2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lla_uart.o(.text.UART0_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_2_IRQHandler &rArr; LLA_UART1_IRQHandler &rArr; HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART3_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_3_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lla_uart.o(.text.UART1_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_3_IRQHandler &rArr; LLA_UART4_IRQHandler &rArr; HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART2_IRQHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l19x.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>Uart_ClrStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_ClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[187]"></a>Uart_EnableFunc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_EnableFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[166]"></a>Uart_EnableIrq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uart.o(.text.Uart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_EnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[183]"></a>Uart_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(.text.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendDataPoll
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>Uart_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uart.o(.text.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Uart_Init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[184]"></a>Uart_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text.Uart_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_3_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_2_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>Uart_SendDataPoll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(.text.Uart_SendDataPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_SendDataPoll &rArr; Uart_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_WriteBuffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Write
</UL>

<P><STRONG><a name="[271]"></a>loop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._Z4loopv))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>setup()</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, main.o(.text._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = setup() &rArr; unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&) &rArr; unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&) &rArr; unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3) &rArr; T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::ArrayShortcuts&lang;ArduinoJson6185_11::MemberProxy&lang;ArduinoJson6185_11::JsonDocument&, const char*&rang;&rang;::impl() const
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::overflowed() const
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;int, void&rang;::toJson(int, ArduinoJson6185_11::VariantRef)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;double, void&rang;::toJson(double, ArduinoJson6185_11::VariantRef)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::variantGetOrAddElement(ArduinoJson6185_11::VariantData*, unsigned, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::~BasicJsonDocument__sub_object()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::BasicJsonDocument__sub_object(unsigned, ArduinoJson6185_11::DefaultAllocator)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantRefBase&lang;ArduinoJson6185_11::VariantData&rang;::VariantRefBase__sub_object(ArduinoJson6185_11::VariantData*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;T1, (bool)0, void&rang; ArduinoJson6185_11::adaptString&lang;const char*&rang;(const T1&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>RS485Class::end()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs485.o(.text._ZN10RS485Class3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = RS485Class::end() &rArr; HardwareSerial::end() &rArr; LLA_UART_DeInit &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::end()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[52]"></a>RS485Class::peek()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rs485.o(.text._ZN10RS485Class4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Class::peek()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[51]"></a>RS485Class::read()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rs485.o(.text._ZN10RS485Class4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Class::read()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[53]"></a>RS485Class::begin(unsigned long)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rs485.o(.text._ZN10RS485Class5beginEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485Class::begin(unsigned long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[55]"></a>RS485Class::begin(unsigned long, int, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rs485.o(.text._ZN10RS485Class5beginEmii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485Class::begin(unsigned long, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[54]"></a>RS485Class::begin(unsigned long, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, rs485.o(.text._ZN10RS485Class5beginEmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485Class::begin(unsigned long, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[56]"></a>RS485Class::begin(unsigned long, unsigned short, int, int)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rs485.o(.text._ZN10RS485Class5beginEmtii))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = RS485Class::begin(unsigned long, unsigned short, int, int) &rArr; HardwareSerial::begin(unsigned, SERIAL_Config) &rArr; LLA_UART_Init &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[4f]"></a>RS485Class::flush()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rs485.o(.text._ZN10RS485Class5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Class::flush()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[31]"></a>RS485Class::write(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rs485.o(.text._ZN10RS485Class5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Class::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::setWriteError(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[50]"></a>RS485Class::available()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rs485.o(.text._ZN10RS485Class9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485Class::available()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[58]"></a>RS485Class::operator bool()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs485.o(.text._ZN10RS485ClasscvbEv))
<BR>[Address Reference Count : 1]<UL><LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[2db]"></a>ModbusClient::ModbusClient(unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modbusclient.o(.text._ZN12ModbusClientC2Em), UNUSED)

<P><STRONG><a name="[233]"></a>ModbusClient::ModbusClient__sub_object(unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modbusclient.o(.text._ZN12ModbusClientC2Em), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUClientClass::ModbusRTUClientClass()
</UL>

<P><STRONG><a name="[5a]"></a>ModbusClient::~ModbusClient__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, modbusclient.o(.text._ZN12ModbusClientD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModbusClient::~ModbusClient__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::~ModbusClient__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusclient.o(.rodata._ZTV12ModbusClient)
</UL>
<P><STRONG><a name="[1b2]"></a>ModbusClient::~ModbusClient()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, modbusclient.o(.text._ZN12ModbusClientD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_free
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[59]"></a>ModbusClient::~ModbusClient__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, modbusclient.o(.text._ZN12ModbusClientD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusClient::~ModbusClient__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUClientClass::~ModbusRTUClientClass()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::~ModbusClient__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusclient.o(.rodata._ZTV12ModbusClient)
</UL>
<P><STRONG><a name="[1b4]"></a>ModbusServer::ModbusServer__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbusserver.o(.text._ZN12ModbusServerC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::ModbusRTUServerClass()
</UL>

<P><STRONG><a name="[5d]"></a>ModbusServer::~ModbusServer__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbusserver.o(.text._ZN12ModbusServerD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> modbusserver.o(.rodata._ZTV12ModbusServer)
</UL>
<P><STRONG><a name="[1b5]"></a>ModbusServer::~ModbusServer()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, modbusserver.o(.text._ZN12ModbusServerD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_free
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[5c]"></a>ModbusServer::~ModbusServer__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, modbusserver.o(.text._ZN12ModbusServerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusServer::~ModbusServer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::~ModbusRTUServerClass()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusserver.o(.rodata._ZTV12ModbusServer)
</UL>
<P><STRONG><a name="[15c]"></a>HardwareSerial::IRQHandler(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN14HardwareSerial10IRQHandlerEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareSerial::IRQHandler(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART4_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART1_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>HardwareSerial::end()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN14HardwareSerial3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HardwareSerial::end() &rArr; LLA_UART_DeInit &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Class::end()
</UL>

<P><STRONG><a name="[62]"></a>HardwareSerial::peek()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hardwareserial.o(.text._ZN14HardwareSerial4peekEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[61]"></a>HardwareSerial::read()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardwareserial.o(.text._ZN14HardwareSerial4readEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[1af]"></a>HardwareSerial::begin(unsigned, SERIAL_Config)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN14HardwareSerial5beginEj13SERIAL_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = HardwareSerial::begin(unsigned, SERIAL_Config) &rArr; LLA_UART_Init &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Class::begin(unsigned long, unsigned short, int, int)
</UL>

<P><STRONG><a name="[5f]"></a>HardwareSerial::flush()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(.text._ZN14HardwareSerial5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[5e]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HardwareSerial::write(unsigned char) &rArr; LLA_UART_Write &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[60]"></a>HardwareSerial::available()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwareserial.o(.text._ZN14HardwareSerial9availableEv))
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[1b6]"></a>HardwareSerial::HardwareSerial(UART_name_t)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN14HardwareSerialC2E11UART_name_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>

<P><STRONG><a name="[262]"></a>HardwareSerial::HardwareSerial__sub_object(UART_name_t)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN14HardwareSerialC2E11UART_name_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareSerial::HardwareSerial__sub_object(UART_name_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[1b8]"></a>ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, main.o(.text._ZN18ArduinoJson6185_1110FloatPartsIfE9normalizeERf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatTraits&lang;float, (unsigned)4&rang;::negativeBinaryPowerOfTenPlusOne(int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatTraits&lang;float, (unsigned)4&rang;::positiveBinaryPowerOfTen(int)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatTraits&lang;float, (unsigned)4&rang;::negativeBinaryPowerOfTen(int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
</UL>

<P><STRONG><a name="[1c2]"></a>ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, main.o(.text._ZN18ArduinoJson6185_1110FloatPartsIfEC2Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float) &rArr; ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1c6]"></a>ArduinoJson6185_11::MemoryPool::allocRight(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1110MemoryPool10allocRightEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::canAlloc(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;()
</UL>

<P><STRONG><a name="[1c8]"></a>T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1110MemoryPool10allocRightINS_11VariantSlotEEEPT_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::allocVariant()
</UL>

<P><STRONG><a name="[1c9]"></a>ArduinoJson6185_11::MemoryPool::allocVariant()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1110MemoryPool12allocVariantEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[221]"></a>ArduinoJson6185_11::MemoryPool::buffer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1110MemoryPool6bufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool()
</UL>

<P><STRONG><a name="[224]"></a>ArduinoJson6185_11::MemoryPool::MemoryPool__sub_object(char*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1110MemoryPoolC2EPcj))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned)
</UL>

<P><STRONG><a name="[223]"></a>ArduinoJson6185_11::addPadding(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1110addPaddingEj))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned)
</UL>

<P><STRONG><a name="[1ca]"></a>bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1110slotSetKeyINS_13StringAdapterIPKcLb0EvEEEEbPNS_11VariantSlotET_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*) &rArr; bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1cb]"></a>bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1110slotSetKeyINS_13StringAdapterIPKcLb0EvEEEEbPNS_11VariantSlotET_PNS_10MemoryPoolENS_16storage_policies16store_by_addressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::data() const
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::setKey(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1bb]"></a>ArduinoJson6185_11::FloatTraits&lang;float, (unsigned)4&rang;::negativeBinaryPowerOfTen(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[1ba]"></a>ArduinoJson6185_11::FloatTraits&lang;float, (unsigned)4&rang;::positiveBinaryPowerOfTen(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[1c0]"></a>ArduinoJson6185_11::FloatTraits&lang;float, (unsigned)4&rang;::negativeBinaryPowerOfTenPlusOne(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111FloatTraitsIfLj4EE31negativeBinaryPowerOfTenPlusOneEi))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[1ce]"></a>ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::VariantData::setInteger&lang;int&rang;(T1)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData10setIntegerIiEENS_9enable_ifIXsr9is_signedIT_EE5valueEvE4typeES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::VariantData::setInteger&lang;int&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;int, void&rang;::toJson(int, ArduinoJson6185_11::VariantRef)
</UL>

<P><STRONG><a name="[1d0]"></a>bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData11storeStringINS_13StringAdapterIPKcLb0EvEEEEbT_PNS_10MemoryPoolENS_16storage_policies16store_by_addressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address) &rArr; ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::isNull() const
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::data() const
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setNull()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::setString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1a3]"></a>ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData14getOrAddMemberINS_13StringAdapterIPKcLb0EvEEEEPS0_T_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::isObject() const
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::isNull() const
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::toObject()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1d8]"></a>ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData15getOrAddElementEjPNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::isArray() const
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::isNull() const
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::toArray()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::variantGetOrAddElement(ArduinoJson6185_11::VariantData*, unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1d3]"></a>ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData16setStringPointerEPKcNS_16storage_policies16store_by_addressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>

<P><STRONG><a name="[1e6]"></a>ArduinoJson6185_11::VariantData::init()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonDocument::JsonDocument__sub_object(ArduinoJson6185_11::MemoryPool)
</UL>

<P><STRONG><a name="[1d2]"></a>ArduinoJson6185_11::VariantData::setNull()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData7setNullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::VariantData::setNull()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>

<P><STRONG><a name="[1cf]"></a>ArduinoJson6185_11::VariantData::setType(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData7setTypeEh))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::toObject()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setFloat(float)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::toArray()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setNull()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::VariantData::setInteger&lang;int&rang;(T1)
</UL>

<P><STRONG><a name="[1d9]"></a>ArduinoJson6185_11::VariantData::toArray()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData7toArrayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::VariantData::toArray()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::clear()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1dd]"></a>ArduinoJson6185_11::VariantData::setFloat(float)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData8setFloatEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::VariantData::setFloat(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;double, void&rang;::toJson(double, ArduinoJson6185_11::VariantRef)
</UL>

<P><STRONG><a name="[1d5]"></a>ArduinoJson6185_11::VariantData::toObject()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData8toObjectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::VariantData::toObject()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::clear()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1de]"></a>bool ArduinoJson6185_11::VariantData::setString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantData9setStringINS_13StringAdapterIPKcLb0EvEEEEbT_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bool ArduinoJson6185_11::VariantData::setString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address) &rArr; ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::variantSetString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantData*, T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[20e]"></a>ArduinoJson6185_11::VariantSlot::setNextNotNull(ArduinoJson6185_11::VariantSlot*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantSlot14setNextNotNullEPS0_))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[20a]"></a>ArduinoJson6185_11::VariantSlot::data()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantSlot4dataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[207]"></a>ArduinoJson6185_11::VariantSlot::next()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantSlot4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot* ArduinoJson6185_11::CollectionData::getSlot&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::getPreviousSlot(ArduinoJson6185_11::VariantSlot*) const
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::removeSlot(ArduinoJson6185_11::VariantSlot*)
</UL>

<P><STRONG><a name="[20f]"></a>ArduinoJson6185_11::VariantSlot::clear()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantSlot5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1cd]"></a>ArduinoJson6185_11::VariantSlot::setKey(const char*, ArduinoJson6185_11::storage_policies::store_by_address)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantSlot6setKeyEPKcNS_16storage_policies16store_by_addressE))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>

<P><STRONG><a name="[208]"></a>ArduinoJson6185_11::VariantSlot::setNext(ArduinoJson6185_11::VariantSlot*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1111VariantSlot7setNextEPS0_))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::removeSlot(ArduinoJson6185_11::VariantSlot*)
</UL>

<P><STRONG><a name="[1a2]"></a>ArduinoJson6185_11::StringAdapter&lang;T1, (bool)0, void&rang; ArduinoJson6185_11::adaptString&lang;const char*&rang;(const T1&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1111adaptStringIPKcEENS_13StringAdapterIT_Lb0EvEERKS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::StringAdapter&lang;T1, (bool)0, void&rang; ArduinoJson6185_11::adaptString&lang;const char*&rang;(const T1&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::StringAdapter__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1e0]"></a>unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(.text._ZN18ArduinoJson6185_1111doSerializeINS_14JsonSerializerENS_17BasicJsonDocumentINS_16DefaultAllocatorEEENS_6WriterI14HardwareSerialvEEEEjRKT0_T1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3) &rArr; T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::JsonSerializer__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&)
</UL>

<P><STRONG><a name="[1e3]"></a>ArduinoJson6185_11::safe_strcmp(const char*, const char*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1111safe_strcmpEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::safe_strcmp(const char*, const char*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const
</UL>

<P><STRONG><a name="[220]"></a>ArduinoJson6185_11::JsonDocument::memoryPool()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1112JsonDocument10memoryPoolEv))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool()
</UL>

<P><STRONG><a name="[1e5]"></a>ArduinoJson6185_11::JsonDocument::JsonDocument__sub_object(ArduinoJson6185_11::MemoryPool)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1112JsonDocumentC2ENS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::JsonDocument::JsonDocument__sub_object(ArduinoJson6185_11::MemoryPool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::BasicJsonDocument__sub_object(unsigned, ArduinoJson6185_11::DefaultAllocator)
</UL>

<P><STRONG><a name="[226]"></a>ArduinoJson6185_11::JsonDocument::~JsonDocument__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1112JsonDocumentD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::~BasicJsonDocument__sub_object()
</UL>

<P><STRONG><a name="[1df]"></a>ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::StringAdapter__sub_object(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1113StringAdapterIPKcLb0EvEC2ES2_))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;T1, (bool)0, void&rang; ArduinoJson6185_11::adaptString&lang;const char*&rang;(const T1&)
</UL>

<P><STRONG><a name="[1e7]"></a>void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIfEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::isnan&lang;float&rang;(T1)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::isinf&lang;float&rang;(T1)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeDecimals(unsigned, signed char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned&rang;(T1)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitFloat(float)
</UL>

<P><STRONG><a name="[1ef]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE11writeStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitString(const char*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
</UL>

<P><STRONG><a name="[1f1]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeBoolean(bool)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeBooleanEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeBoolean(bool) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitBoolean(bool)
</UL>

<P><STRONG><a name="[1ec]"></a>ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned&rang;(T1)</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIjEENS_9enable_ifIXsr11is_unsignedIT_EE5valueEvE4typeES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1f3]"></a>ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;long&rang;(T1)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIlEENS_9enable_ifIXsr9is_signedIT_EE5valueEvE4typeES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;long&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitSignedInteger(long)
</UL>

<P><STRONG><a name="[1f4]"></a>ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerImEENS_9enable_ifIXsr11is_unsignedIT_EE5valueEvE4typeES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitUnsignedInteger(unsigned long)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;long&rang;(T1)
</UL>

<P><STRONG><a name="[1ee]"></a>ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIsEENS_9enable_ifIXsr9is_signedIT_EE5valueEvE4typeES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1f5]"></a>ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1)</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerItEENS_9enable_ifIXsr11is_unsignedIT_EE5valueEvE4typeES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1)
</UL>

<P><STRONG><a name="[1ed]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeDecimals(unsigned, signed char)</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE13writeDecimalsEja))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeDecimals(unsigned, signed char) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1e9]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitNull()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeBoolean(bool)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1f2]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeDecimals(unsigned, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned&rang;(T1)
</UL>

<P><STRONG><a name="[1f8]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, unsigned) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitRawJson(const char*, unsigned)
</UL>

<P><STRONG><a name="[1eb]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;long&rang;(T1)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1f0]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::EscapeSequence::escapeChar(char)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*)
</UL>

<P><STRONG><a name="[1fb]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::TextFormatter__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEEC2ES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::TextFormatter__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::CountingDecorator__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::JsonSerializer__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)
</UL>

<P><STRONG><a name="[1ab]"></a>unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1113serializeJsonINS_17BasicJsonDocumentINS_16DefaultAllocatorEEE14HardwareSerialEEjRKT_RT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&) &rArr; unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&) &rArr; unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3) &rArr; T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1fe]"></a>T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1113variantAcceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeEPKNS_11VariantDataERS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitNull()
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[201]"></a>ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::deallocate(void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::deallocate(void*) &rArr; ArduinoJson6185_11::DefaultAllocator::deallocate(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::DefaultAllocator::deallocate(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool()
</UL>

<P><STRONG><a name="[203]"></a>ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocate(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocate(unsigned) &rArr; ArduinoJson6185_11::DefaultAllocator::allocate(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::DefaultAllocator::allocate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned)
</UL>

<P><STRONG><a name="[225]"></a>ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::AllocatorOwner__sub_object(ArduinoJson6185_11::DefaultAllocator)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1114AllocatorOwnerINS_16DefaultAllocatorEEC2ES1_))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::BasicJsonDocument__sub_object(unsigned, ArduinoJson6185_11::DefaultAllocator)
</UL>

<P><STRONG><a name="[205]"></a>ArduinoJson6185_11::CollectionData::removeSlot(ArduinoJson6185_11::VariantSlot*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1114CollectionData10removeSlotEPNS_11VariantSlotE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::CollectionData::removeSlot(ArduinoJson6185_11::VariantSlot*) &rArr; ArduinoJson6185_11::CollectionData::getPreviousSlot(ArduinoJson6185_11::VariantSlot*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::getPreviousSlot(ArduinoJson6185_11::VariantSlot*) const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::setNext(ArduinoJson6185_11::VariantSlot*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1d7]"></a>ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text._ZN18ArduinoJson6185_1114CollectionData14getOrAddMemberINS_13StringAdapterIPKcLb0EvEEEEPNS_11VariantDataET_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot* ArduinoJson6185_11::CollectionData::getSlot&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::isNull() const
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::data()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1db]"></a>ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1114CollectionData15getOrAddElementEjPNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::slotData(ArduinoJson6185_11::VariantSlot*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1dc]"></a>ArduinoJson6185_11::CollectionData::clear()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1114CollectionData5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::toObject()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::toArray()
</UL>

<P><STRONG><a name="[20c]"></a>ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1114CollectionData7addSlotEPNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::clear()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::setNextNotNull(ArduinoJson6185_11::VariantSlot*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::allocVariant()
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[20b]"></a>ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(.text._ZN18ArduinoJson6185_1114CollectionData9addMemberINS_13StringAdapterIPKcLb0EvEEEEPNS_11VariantDataET_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::addMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::removeSlot(ArduinoJson6185_11::VariantSlot*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::data()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1fa]"></a>ArduinoJson6185_11::EscapeSequence::escapeChar(char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114EscapeSequence10escapeCharEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::EscapeSequence::escapeChar(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::EscapeSequence::escapeTable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char)
</UL>

<P><STRONG><a name="[210]"></a>ArduinoJson6185_11::EscapeSequence::escapeTable(bool)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1114EscapeSequence11escapeTableEb))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::EscapeSequence::escapeChar(char)
</UL>

<P><STRONG><a name="[211]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitFloat(float)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE10visitFloatEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitFloat(float) &rArr; void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;short&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[213]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE11visitObjectERKNS_14CollectionDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&) &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::head() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::key() const
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::next()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::data()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[217]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitString(const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE11visitStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitString(const char*) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeChar(char) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[218]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitBoolean(bool)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE12visitBooleanEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitBoolean(bool) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeBoolean(bool) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeBoolean(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[219]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitRawJson(const char*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE12visitRawJsonEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitRawJson(const char*, unsigned) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, unsigned) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[21a]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitSignedInteger(long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE18visitSignedIntegerEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitSignedInteger(long) &rArr; ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;long&rang;(T1) &rArr; ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;long&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[21b]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitUnsignedInteger(unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE20visitUnsignedIntegerEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitUnsignedInteger(unsigned long) &rArr; ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[214]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(char)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE5writeEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(char) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
</UL>

<P><STRONG><a name="[200]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitNull()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE9visitNullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitNull() &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&)
</UL>

<P><STRONG><a name="[1e1]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::JsonSerializer__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEEC2ES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::JsonSerializer__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;) &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::TextFormatter__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::TextFormatter__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3)
</UL>

<P><STRONG><a name="[21d]"></a>ArduinoJson6185_11::VariantRefBase&lang;const ArduinoJson6185_11::VariantData&rang;::VariantRefBase__sub_object(const ArduinoJson6185_11::VariantData*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1114VariantRefBaseIKNS_11VariantDataEEC2EPS2_))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantConstRef::VariantConstRef__sub_object(const ArduinoJson6185_11::VariantData*)
</UL>

<P><STRONG><a name="[1a4]"></a>ArduinoJson6185_11::VariantRefBase&lang;ArduinoJson6185_11::VariantData&rang;::VariantRefBase__sub_object(ArduinoJson6185_11::VariantData*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1114VariantRefBaseINS_11VariantDataEEC2EPS1_))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[21c]"></a>ArduinoJson6185_11::VariantConstRef::VariantConstRef__sub_object(const ArduinoJson6185_11::VariantData*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1115VariantConstRefC2EPKNS_11VariantDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::VariantConstRef::VariantConstRef__sub_object(const ArduinoJson6185_11::VariantData*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantRefBase&lang;const ArduinoJson6185_11::VariantData&rang;::VariantRefBase__sub_object(const ArduinoJson6185_11::VariantData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonDocument::getVariant() const
</UL>

<P><STRONG><a name="[202]"></a>ArduinoJson6185_11::DefaultAllocator::deallocate(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1116DefaultAllocator10deallocateEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::DefaultAllocator::deallocate(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::deallocate(void*)
</UL>

<P><STRONG><a name="[204]"></a>ArduinoJson6185_11::DefaultAllocator::allocate(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1116DefaultAllocator8allocateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6185_11::DefaultAllocator::allocate(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocate(unsigned)
</UL>

<P><STRONG><a name="[21e]"></a>bool ArduinoJson6185_11::variantSetString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantData*, T1, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1116variantSetStringINS_13StringAdapterIPKcLb0EvEEEEbPNS_11VariantDataET_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bool ArduinoJson6185_11::variantSetString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantData*, T1, ArduinoJson6185_11::MemoryPool*) &rArr; bool ArduinoJson6185_11::VariantData::setString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address) &rArr; ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::setString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef)
</UL>

<P><STRONG><a name="[21f]"></a>ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1117BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool() &rArr; ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::deallocate(void*) &rArr; ArduinoJson6185_11::DefaultAllocator::deallocate(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::deallocate(void*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonDocument::memoryPool()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::buffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::~BasicJsonDocument__sub_object()
</UL>

<P><STRONG><a name="[222]"></a>ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_1117BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned) &rArr; ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocate(unsigned) &rArr; ArduinoJson6185_11::DefaultAllocator::allocate(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocate(unsigned)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::addPadding(unsigned)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::MemoryPool__sub_object(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::BasicJsonDocument__sub_object(unsigned, ArduinoJson6185_11::DefaultAllocator)
</UL>

<P><STRONG><a name="[1a1]"></a>ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::BasicJsonDocument__sub_object(unsigned, ArduinoJson6185_11::DefaultAllocator)</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, main.o(.text._ZN18ArduinoJson6185_1117BasicJsonDocumentINS_16DefaultAllocatorEEC2EjS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::BasicJsonDocument__sub_object(unsigned, ArduinoJson6185_11::DefaultAllocator) &rArr; ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned) &rArr; ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocate(unsigned) &rArr; ArduinoJson6185_11::DefaultAllocator::allocate(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::allocPool(unsigned)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::AllocatorOwner__sub_object(ArduinoJson6185_11::DefaultAllocator)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonDocument::JsonDocument__sub_object(ArduinoJson6185_11::MemoryPool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1ac]"></a>ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::~BasicJsonDocument__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1117BasicJsonDocumentINS_16DefaultAllocatorEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::~BasicJsonDocument__sub_object() &rArr; ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool() &rArr; ArduinoJson6185_11::AllocatorOwner&lang;ArduinoJson6185_11::DefaultAllocator&rang;::deallocate(void*) &rArr; ArduinoJson6185_11::DefaultAllocator::deallocate(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;::freePool()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonDocument::~JsonDocument__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1f7]"></a>ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, unsigned)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(const char*)
</UL>

<P><STRONG><a name="[1f9]"></a>ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char) &rArr; ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeRaw(char)
</UL>

<P><STRONG><a name="[1fc]"></a>ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::CountingDecorator__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_1117CountingDecoratorINS_6WriterI14HardwareSerialvEEEC2ERS3_))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::TextFormatter__sub_object(ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;)
</UL>

<P><STRONG><a name="[1a9]"></a>ArduinoJson6185_11::variantGetOrAddElement(ArduinoJson6185_11::VariantData*, unsigned, ArduinoJson6185_11::MemoryPool*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_1122variantGetOrAddElementEPNS_11VariantDataEjPNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ArduinoJson6185_11::variantGetOrAddElement(ArduinoJson6185_11::VariantData*, unsigned, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::CollectionData::addSlot(ArduinoJson6185_11::MemoryPool*) &rArr; ArduinoJson6185_11::MemoryPool::allocVariant() &rArr; T1* ArduinoJson6185_11::MemoryPool::allocRight&lang;ArduinoJson6185_11::VariantSlot&rang;() &rArr; ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1ea]"></a>bool ArduinoJson6185_11::isinf&lang;float&rang;(T1)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_115isinfIfEEbT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bool ArduinoJson6185_11::isinf&lang;float&rang;(T1) &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[1e8]"></a>bool ArduinoJson6185_11::isnan&lang;float&rang;(T1)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_115isnanIfEEbT_))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[227]"></a>ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_116WriterI14HardwareSerialvE5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[228]"></a>ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text._ZN18ArduinoJson6185_116WriterI14HardwareSerialvE5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(unsigned char)
</UL>

<P><STRONG><a name="[22d]"></a>ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::Writer__sub_object(Print&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_116WriterI14HardwareSerialvEC2ER5Print))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&)
</UL>

<P><STRONG><a name="[22a]"></a>ArduinoJson6185_11::getData(const ArduinoJson6185_11::VariantRefBase&lang;ArduinoJson6185_11::VariantData&rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_117getDataERKNS_14VariantRefBaseINS_11VariantDataEEE))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;int, void&rang;::toJson(int, ArduinoJson6185_11::VariantRef)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;double, void&rang;::toJson(double, ArduinoJson6185_11::VariantRef)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef)
</UL>

<P><STRONG><a name="[22b]"></a>ArduinoJson6185_11::getPool(const ArduinoJson6185_11::VariantRef&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_117getPoolERKNS_10VariantRefE))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef)
</UL>

<P><STRONG><a name="[20d]"></a>ArduinoJson6185_11::slotData(ArduinoJson6185_11::VariantSlot*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZN18ArduinoJson6185_118slotDataEPNS_11VariantSlotE))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1a5]"></a>ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, main.o(.text._ZN18ArduinoJson6185_119ConverterIPKcvE6toJsonES2_NS_10VariantRefE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6185_11::Converter&lang;const char*, void&rang;::toJson(const char*, ArduinoJson6185_11::VariantRef) &rArr; bool ArduinoJson6185_11::variantSetString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantData*, T1, ArduinoJson6185_11::MemoryPool*) &rArr; bool ArduinoJson6185_11::VariantData::setString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*) &rArr; bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address) &rArr; ArduinoJson6185_11::VariantData::setStringPointer(const char*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::getPool(const ArduinoJson6185_11::VariantRef&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::getData(const ArduinoJson6185_11::VariantRefBase&lang;ArduinoJson6185_11::VariantData&rang;&)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::variantSetString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantData*, T1, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;T1, (bool)0, void&rang; ArduinoJson6185_11::adaptString&lang;const char*&rang;(const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1aa]"></a>ArduinoJson6185_11::Converter&lang;double, void&rang;::toJson(double, ArduinoJson6185_11::VariantRef)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(.text._ZN18ArduinoJson6185_119ConverterIdvE6toJsonEdNS_10VariantRefE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6185_11::Converter&lang;double, void&rang;::toJson(double, ArduinoJson6185_11::VariantRef) &rArr; ArduinoJson6185_11::VariantData::setFloat(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::getData(const ArduinoJson6185_11::VariantRefBase&lang;ArduinoJson6185_11::VariantData&rang;&)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::setFloat(float)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1a7]"></a>ArduinoJson6185_11::Converter&lang;int, void&rang;::toJson(int, ArduinoJson6185_11::VariantRef)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_119ConverterIivE6toJsonEiNS_10VariantRefE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::Converter&lang;int, void&rang;::toJson(int, ArduinoJson6185_11::VariantRef) &rArr; ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::VariantData::setInteger&lang;int&rang;(T1)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::getData(const ArduinoJson6185_11::VariantRefBase&lang;ArduinoJson6185_11::VariantData&rang;&)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_signed&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::VariantData::setInteger&lang;int&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1fd]"></a>unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text._ZN18ArduinoJson6185_119serializeINS_14JsonSerializerENS_17BasicJsonDocumentINS_16DefaultAllocatorEEE14HardwareSerialEEjRKT0_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&) &rArr; unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3) &rArr; T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;::Writer__sub_object(Print&)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&)
</UL>

<P><STRONG><a name="[22e]"></a>Arduino_DebugUtils::printTimestamp()</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, arduino_debugutils.o(.text._ZN18Arduino_DebugUtils14printTimestampEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::print(int, const char*, ...)
</UL>

<P><STRONG><a name="[138]"></a>Arduino_DebugUtils::print(int, const char*, ...)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, arduino_debugutils.o(.text._ZN18Arduino_DebugUtils5printEiPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::shouldPrint(int) const
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::vPrint(const char*, std::__va_list)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::printTimestamp()
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_printf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_fprintf
</UL>

<P><STRONG><a name="[231]"></a>Arduino_DebugUtils::vPrint(const char*, std::__va_list)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, arduino_debugutils.o(.text._ZN18Arduino_DebugUtils6vPrintEPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Arduino_DebugUtils::vPrint(const char*, std::__va_list) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::print(int, const char*, ...)
</UL>

<P><STRONG><a name="[232]"></a>ModbusRTUClientClass::ModbusRTUClientClass()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modbusrtuclient.o(.text._ZN20ModbusRTUClientClassC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::ModbusClient__sub_object(unsigned long)
</UL>

<P><STRONG><a name="[265]"></a>ModbusRTUClientClass::ModbusRTUClientClass__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modbusrtuclient.o(.text._ZN20ModbusRTUClientClassC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusRTUClientClass::ModbusRTUClientClass__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[63]"></a>ModbusRTUClientClass::~ModbusRTUClientClass__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, modbusrtuclient.o(.text._ZN20ModbusRTUClientClassD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModbusRTUClientClass::~ModbusRTUClientClass__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUClientClass::~ModbusRTUClientClass__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusrtuclient.o(.rodata._ZTV20ModbusRTUClientClass)
</UL>
<P><STRONG><a name="[234]"></a>ModbusRTUClientClass::~ModbusRTUClientClass()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbusrtuclient.o(.text._ZN20ModbusRTUClientClassD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::~ModbusClient__sub_object()
</UL>

<P><STRONG><a name="[2d]"></a>ModbusRTUClientClass::~ModbusRTUClientClass__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbusrtuclient.o(.text._ZN20ModbusRTUClientClassD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusRTUClientClass::~ModbusRTUClientClass__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUClientClass::~ModbusRTUClientClass__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modbusrtuclient.o(.text.__cxx_global_var_init)
<LI> modbusrtuclient.o(.rodata._ZTV20ModbusRTUClientClass)
</UL>
<P><STRONG><a name="[64]"></a>ModbusRTUServerClass::poll()</STRONG> (Thumb, 36 bytes, Stack size 264 bytes, modbusrtuserver.o(.text._ZN20ModbusRTUServerClass4pollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = ModbusRTUServerClass::poll() &rArr; modbus_reply &rArr; send_msg &rArr; modbus_flush &rArr; Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusrtuserver.o(.rodata._ZTV20ModbusRTUServerClass)
</UL>
<P><STRONG><a name="[237]"></a>ModbusRTUServerClass::ModbusRTUServerClass()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbusrtuserver.o(.text._ZN20ModbusRTUServerClassC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServer::ModbusServer__sub_object()
</UL>

<P><STRONG><a name="[266]"></a>ModbusRTUServerClass::ModbusRTUServerClass__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbusrtuserver.o(.text._ZN20ModbusRTUServerClassC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusRTUServerClass::ModbusRTUServerClass__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[65]"></a>ModbusRTUServerClass::~ModbusRTUServerClass__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, modbusrtuserver.o(.text._ZN20ModbusRTUServerClassD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ModbusRTUServerClass::~ModbusRTUServerClass__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::~ModbusRTUServerClass__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusrtuserver.o(.rodata._ZTV20ModbusRTUServerClass)
</UL>
<P><STRONG><a name="[238]"></a>ModbusRTUServerClass::~ModbusRTUServerClass()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbusrtuserver.o(.text._ZN20ModbusRTUServerClassD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServer::~ModbusServer__sub_object()
</UL>

<P><STRONG><a name="[2e]"></a>ModbusRTUServerClass::~ModbusRTUServerClass__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbusrtuserver.o(.text._ZN20ModbusRTUServerClassD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ModbusRTUServerClass::~ModbusRTUServerClass__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::~ModbusRTUServerClass__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> modbusrtuserver.o(.rodata._ZTV20ModbusRTUServerClass)
<LI> modbusrtuserver.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[239]"></a>Print::printFloat(double, unsigned char)</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, print.o(.text._ZN5Print10printFloatEdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Print::printFloat(double, unsigned char) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>

<P><STRONG><a name="[242]"></a>Print::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, print.o(.text._ZN5Print11printNumberEyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long long, int)
</UL>

<P><STRONG><a name="[1b0]"></a>Print::setWriteError(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetclient.o(.text._ZN5Print13setWriteErrorEi))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Class::write(unsigned char)
</UL>

<P><STRONG><a name="[66]"></a>Print::flush()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwareserial.o(.text._ZN5Print5flushEv))
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
</UL>
<P><STRONG><a name="[3f]"></a>Print::print(const __FlashStringHelper*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Print::print(const __FlashStringHelper*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[36]"></a>Print::print(const char*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Print::print(const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[34]"></a>Print::print(const String&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printERK6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const String&)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::length() const
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::c_str() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[40]"></a>Print::print(const Printable&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printERK9Printable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Print::print(const Printable&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[35]"></a>Print::print(char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, print.o(.text._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Print::print(char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[3e]"></a>Print::print(double, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[37]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(unsigned char, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[38]"></a>Print::print(int, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(int, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[39]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(unsigned, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[3a]"></a>Print::print(long, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(long, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[3b]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(unsigned long, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[3c]"></a>Print::print(long long, int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, print.o(.text._ZN5Print5printExi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print::print(long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[3d]"></a>Print::print(unsigned long long, int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEyi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[32]"></a>Print::write(const char*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[33]"></a>Print::write(const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, print.o(.text._ZN5Print5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[4d]"></a>Print::println(const __FlashStringHelper*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(const __FlashStringHelper*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[44]"></a>Print::println(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[42]"></a>Print::println(const String&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnERK6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(const String&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[4e]"></a>Print::println(const Printable&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnERK9Printable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(const Printable&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[43]"></a>Print::println(char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(char)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[4c]"></a>Print::println(double, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(.text._ZN5Print7printlnEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println(double, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[45]"></a>Print::println(unsigned char, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(unsigned char, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[46]"></a>Print::println(int, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(int, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[47]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println(unsigned, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[48]"></a>Print::println(long, int)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, print.o(.text._ZN5Print7printlnEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println(long, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[49]"></a>Print::println(unsigned long, int)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, print.o(.text._ZN5Print7printlnEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println(unsigned long, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[41]"></a>Print::println()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, print.o(.text._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[4a]"></a>Print::println(long long, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(.text._ZN5Print7printlnExi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println(long long, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[4b]"></a>Print::println(unsigned long long, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(.text._ZN5Print7printlnEyi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println(unsigned long long, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> rs485.o(.rodata._ZTV10RS485Class)
</UL>
<P><STRONG><a name="[247]"></a>Print::Print__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwareserial.o(.text._ZN5PrintC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>

<P><STRONG><a name="[1b7]"></a>Stream::Stream__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZN6StreamC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(UART_name_t)
</UL>

<P><STRONG><a name="[248]"></a>TwoWire::i2c_get_ack()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire11i2c_get_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_get_ack() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[24c]"></a>TwoWire::i2c_send_ack()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire12i2c_send_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_send_ack() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[24d]"></a>TwoWire::i2c_shift_in()</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wire.o(.text._ZN7TwoWire12i2c_shift_inEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_shift_in() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[24e]"></a>TwoWire::i2c_send_nack()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire13i2c_send_nackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_send_nack() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[24f]"></a>TwoWire::i2c_shift_out(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWire13i2c_shift_outEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_shift_out(unsigned char) &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[68]"></a>TwoWire::begin(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire5beginEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TwoWire::begin(unsigned char) &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[67]"></a>TwoWire::process()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWire7processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TwoWire::process() &rArr; TwoWire::i2c_shift_in() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[249]"></a>TwoWire::set_scl(bool)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire7set_sclEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = TwoWire::set_scl(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[24a]"></a>TwoWire::set_sda(bool)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire7set_sdaEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[251]"></a>TwoWire::i2c_stop()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire8i2c_stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_stop() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[250]"></a>TwoWire::i2c_start()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWire9i2c_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TwoWire::i2c_start() &rArr; TwoWire::set_sda(bool) &rArr; digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[254]"></a>TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWireC2Ehhh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::WireBase__sub_object()
</UL>

<P><STRONG><a name="[264]"></a>TwoWire::TwoWire__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWireC2Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TwoWire::TwoWire__sub_object(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[256]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wire.o(.text._ZN7TwoWireD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::~WireBase__sub_object()
</UL>

<P><STRONG><a name="[2c]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wire.o(.text._ZN7TwoWireD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::~TwoWire__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[69]"></a>WireBase::begin(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wirebase.o(.text._ZN8WireBase5beginEh))
<BR>[Address Reference Count : 1]<UL><LI> wirebase.o(.rodata._ZTV8WireBase)
</UL>
<P><STRONG><a name="[255]"></a>WireBase::WireBase__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wire.o(.text._ZN8WireBaseC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[257]"></a>WireBase::~WireBase__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wire.o(.text._ZN8WireBaseD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::~TwoWire()
</UL>

<P><STRONG><a name="[258]"></a>IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipaddress.o(.text._ZN9IPAddressC2Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printable::Printable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[263]"></a>IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipaddress.o(.text._ZN9IPAddressC2Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[25a]"></a>IPAddress::IPAddress()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ipaddress.o(.text._ZN9IPAddressC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPAddress::IPAddress()
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printable::Printable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[2dc]"></a>IPAddress::IPAddress__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ipaddress.o(.text._ZN9IPAddressC2Ev), UNUSED)

<P><STRONG><a name="[259]"></a>Printable::Printable__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ipaddress.o(.text._ZN9PrintableC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress()
</UL>

<P><STRONG><a name="[1a6]"></a>ArduinoJson6185_11::MemoryPool::overflowed() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1110MemoryPool10overflowedEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1c7]"></a>ArduinoJson6185_11::MemoryPool::canAlloc(unsigned) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1110MemoryPool8canAllocEj))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::MemoryPool::allocRight(unsigned)
</UL>

<P><STRONG><a name="[25b]"></a>ArduinoJson6185_11::VariantData::type() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1111VariantData4typeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::isNull() const
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[1ff]"></a>T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, main.o(.text._ZNK18ArduinoJson6185_1111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::head() const
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::type() const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitNull()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::write(char)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitUnsignedInteger(unsigned long)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitSignedInteger(long)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitRawJson(const char*, unsigned)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitBoolean(bool)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitString(const char*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitFloat(float)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::next()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::data()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&)
</UL>

<P><STRONG><a name="[1d4]"></a>ArduinoJson6185_11::VariantData::isNull() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text._ZNK18ArduinoJson6185_1111VariantData6isNullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::VariantData::isNull() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::type() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1da]"></a>ArduinoJson6185_11::VariantData::isArray() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1111VariantData7isArrayEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData::getOrAddElement(unsigned, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[1d6]"></a>ArduinoJson6185_11::VariantData::isObject() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1111VariantData8isObjectEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::VariantData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[216]"></a>ArduinoJson6185_11::VariantSlot::key() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1111VariantSlot3keyEv))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot* ArduinoJson6185_11::CollectionData::getSlot&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
</UL>

<P><STRONG><a name="[25c]"></a>ArduinoJson6185_11::JsonDocument::getVariant() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text._ZNK18ArduinoJson6185_1112JsonDocument10getVariantEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6185_11::JsonDocument::getVariant() const &rArr; ArduinoJson6185_11::VariantConstRef::VariantConstRef__sub_object(const ArduinoJson6185_11::VariantData*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantConstRef::VariantConstRef__sub_object(const ArduinoJson6185_11::VariantData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[1e2]"></a>T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text._ZNK18ArduinoJson6185_1112JsonDocument6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonDocument::getVariant() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3)
</UL>

<P><STRONG><a name="[1cc]"></a>ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::data() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1113StringAdapterIPKcLb0EvE4dataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::slotSetKey&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(ArduinoJson6185_11::VariantSlot*, T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>

<P><STRONG><a name="[1d1]"></a>ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::isNull() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1113StringAdapterIPKcLb0EvE6isNullEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::VariantData::storeString&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*, ArduinoJson6185_11::storage_policies::store_by_address)
</UL>

<P><STRONG><a name="[25e]"></a>ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZNK18ArduinoJson6185_1113StringAdapterIPKcLb0EvE7compareES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const &rArr; ArduinoJson6185_11::safe_strcmp(const char*, const char*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::safe_strcmp(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot* ArduinoJson6185_11::CollectionData::getSlot&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>

<P><STRONG><a name="[25f]"></a>ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZNK18ArduinoJson6185_1113TextFormatterINS_6WriterI14HardwareSerialvEEE12bytesWrittenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::count() const
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
</UL>

<P><STRONG><a name="[1a8]"></a>ArduinoJson6185_11::ArrayShortcuts&lang;ArduinoJson6185_11::MemberProxy&lang;ArduinoJson6185_11::JsonDocument&, const char*&rang;&rang;::impl() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1114ArrayShortcutsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[206]"></a>ArduinoJson6185_11::CollectionData::getPreviousSlot(ArduinoJson6185_11::VariantSlot*) const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text._ZNK18ArduinoJson6185_1114CollectionData15getPreviousSlotEPNS_11VariantSlotE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::CollectionData::getPreviousSlot(ArduinoJson6185_11::VariantSlot*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::CollectionData::removeSlot(ArduinoJson6185_11::VariantSlot*)
</UL>

<P><STRONG><a name="[215]"></a>ArduinoJson6185_11::CollectionData::head() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1114CollectionData4headEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
</UL>

<P><STRONG><a name="[209]"></a>ArduinoJson6185_11::VariantSlot* ArduinoJson6185_11::CollectionData::getSlot&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(.text._ZNK18ArduinoJson6185_1114CollectionData7getSlotINS_13StringAdapterIPKcLb0EvEEEEPNS_11VariantSlotET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson6185_11::VariantSlot* ArduinoJson6185_11::CollectionData::getSlot&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const &rArr; ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const &rArr; ArduinoJson6185_11::safe_strcmp(const char*, const char*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::key() const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::VariantData* ArduinoJson6185_11::CollectionData::getOrAddMember&lang;ArduinoJson6185_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6185_11::MemoryPool*)
</UL>

<P><STRONG><a name="[212]"></a>ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._ZNK18ArduinoJson6185_1114JsonSerializerINS_6WriterI14HardwareSerialvEEE12bytesWrittenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const &rArr; ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitNull()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitUnsignedInteger(unsigned long)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitSignedInteger(long)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitRawJson(const char*, unsigned)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitBoolean(bool)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitString(const char*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitObject(const ArduinoJson6185_11::CollectionData&)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::visitFloat(float)
</UL>

<P><STRONG><a name="[25d]"></a>T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text._ZNK18ArduinoJson6185_1115VariantConstRef6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[260]"></a>ArduinoJson6185_11::CountingDecorator&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::count() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text._ZNK18ArduinoJson6185_1117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5countEv))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::bytesWritten() const
</UL>

<P><STRONG><a name="[230]"></a>Arduino_DebugUtils::shouldPrint(int) const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arduino_debugutils.o(.text._ZNK18Arduino_DebugUtils11shouldPrintEi))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::print(int, const char*, ...)
</UL>

<P><STRONG><a name="[245]"></a>String::c_str() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(.text._ZNK6String5c_strEv))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const String&)
</UL>

<P><STRONG><a name="[246]"></a>String::length() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(.text._ZNK6String6lengthEv))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const String&)
</UL>

<P><STRONG><a name="[6a]"></a>IPAddress::printTo(Print&) const</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ipaddress.o(.text._ZNK9IPAddress7printToER5Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPAddress::printTo(Print&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.rodata._ZTV9IPAddress)
</UL>
<P><STRONG><a name="[1b1]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUClientClass::~ModbusRTUClientClass__deallocating()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::~ModbusClient__deallocating()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::~ModbusRTUServerClass__deallocating()
</UL>

<P><STRONG><a name="[5b]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 5]<UL><LI> wirebase.o(.rodata._ZTV8WireBase)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> print.o(.rodata._ZTV5Print)
<LI> ipaddress.o(.rodata._ZTV9Printable)
<LI> modbusserver.o(.rodata._ZTV12ModbusServer)
</UL>
<P><STRONG><a name="[267]"></a>_error_print</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, modbus.o(.text._error_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = _error_print &rArr; Debug_fprintf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_fprintf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_strerror
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[117]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[127]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[128]"></a>_sys_istty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[113]"></a>_sys_open</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[12b]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[12c]"></a>_sys_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[261]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[142]"></a>ddl_memclr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ddl.o(.text.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_ADC_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[26a]"></a>delay</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wiring.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay &rArr; LLA_SYS_Time_DelayMS &rArr; LLA_SYS_Time_ConsumeMillis
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_response_timeout
</UL>

<P><STRONG><a name="[134]"></a>delay10us</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ddl.o(.text.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_TempSensorEnable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bgr_BgrEnable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[252]"></a>delayMicroseconds</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wiring.o(.text.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delayMicroseconds &rArr; LLA_SYS_Time_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_response_timeout
</UL>

<P><STRONG><a name="[24b]"></a>digitalRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wiring_digital.o(.text.digitalRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = digitalRead &rArr; LLA_BaseIO_ReadInput &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[253]"></a>digitalWrite</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wiring_digital.o(.text.digitalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = digitalWrite &rArr; LLA_BaseIO_Write &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>

<P><STRONG><a name="[26f]"></a>init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wiring.o(.text.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init &rArr; LLA_UART_Init &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_ADC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_PWM_BaseHZ
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_Flash_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_clock_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frame.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = main &rArr; setup() &rArr; unsigned ArduinoJson6185_11::serializeJson&lang;ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T1&, T2&) &rArr; unsigned ArduinoJson6185_11::serialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, HardwareSerial&rang;(const T2&, T3&) &rArr; unsigned ArduinoJson6185_11::doSerialize&lang;ArduinoJson6185_11::JsonSerializer, ArduinoJson6185_11::BasicJsonDocument&lang;ArduinoJson6185_11::DefaultAllocator&rang;, ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;(const T2&, T3) &rArr; T1::result_type ArduinoJson6185_11::JsonDocument::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::VariantConstRef::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr; T1::result_type ArduinoJson6185_11::variantAccept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(const ArduinoJson6185_11::VariantData*, T1&) &rArr; T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6185_11::VariantData::accept&lang;ArduinoJson6185_11::JsonSerializer&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[22f]"></a>millis</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wiring.o(.text.millis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = millis
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_SYS_Time_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_DebugUtils::printTimestamp()
</UL>

<P><STRONG><a name="[279]"></a>modbus_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbus.o(.text.modbus_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modbus_close
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[272]"></a>modbus_connect</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbus.o(.text.modbus_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modbus_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[273]"></a>modbus_flush</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, modbus.o(.text.modbus_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = modbus_flush &rArr; Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_exception
</UL>

<P><STRONG><a name="[1b3]"></a>modbus_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbus.o(.text.modbus_free), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusClient::~ModbusClient()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServer::~ModbusServer()
</UL>

<P><STRONG><a name="[235]"></a>modbus_receive</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbus.o(.text.modbus_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modbus_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::poll()
</UL>

<P><STRONG><a name="[236]"></a>modbus_reply</STRONG> (Thumb, 1616 bytes, Stack size 368 bytes, modbus.o(.text.modbus_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = modbus_reply &rArr; send_msg &rArr; modbus_flush &rArr; Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_fprintf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_bits_from_bytes
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_io_status
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_exception
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::poll()
</UL>

<P><STRONG><a name="[277]"></a>modbus_set_bits_from_bytes</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, modbus-data.o(.text.modbus_set_bits_from_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = modbus_set_bits_from_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
</UL>

<P><STRONG><a name="[268]"></a>modbus_strerror</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, modbus.o(.text.modbus_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modbus_strerror
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_error_print
</UL>

<P><STRONG><a name="[1ae]"></a>pinMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wiring_digital.o(.text.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pinMode &rArr; LLA_BaseIO_Mode &rArr; get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485Class::begin(unsigned long, unsigned short, int, int)
</UL>

<P><STRONG><a name="[278]"></a>strerror</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, modbus.o(.text.strerror))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_strerror
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeDecimals(unsigned, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned short&rang;(T1)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::enable_if&lang;is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeInteger&lang;unsigned&rang;(T1)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>

<P><STRONG><a name="[2dd]"></a>__aeabi_idiv</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast), UNUSED)

<P><STRONG><a name="[10f]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[fb]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[280]"></a>_dgeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[282]"></a>_dgr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[283]"></a>_dls</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._feq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::isinf&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[285]"></a>_feq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fcmp.o(i._feq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fgeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6185_11::TextFormatter&lang;ArduinoJson6185_11::Writer&lang;HardwareSerial, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[287]"></a>_fgeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fcmp.o(i._fgeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fleq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_best_clk_div
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[289]"></a>_fleq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fcmp.o(i._fleq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[28b]"></a>_fls</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fcmp.o(i._fls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[d5]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2b]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[281]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
</UL>

<P><STRONG><a name="[2de]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[284]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6185_11::isinf&lang;float&rang;(T1)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[28d]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[2df]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[286]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[288]"></a>_fcmpge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fgef.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
</UL>

<P><STRONG><a name="[2e0]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[28a]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>

<P><STRONG><a name="[2e1]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[1c4]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6185_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)
</UL>

<P><STRONG><a name="[28f]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[89]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[8d]"></a>_printf_fp_hex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[19c]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[149]"></a>get_pin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lla_baseio.o(.text.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
</UL>

<P><STRONG><a name="[148]"></a>get_port</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lla_baseio.o(.text.get_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = get_port &rArr; LLA_errorCode_Handler &rArr; LLA_UART_Printf &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Mode
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_Write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_BaseIO_ReadInput
</UL>

<P><STRONG><a name="[16e]"></a>PORTX_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lla_exti.o(.text.PORTX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORTX_IRQHandler &rArr; Gpio_GetIrqStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_F_IRQHandler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_E_IRQHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>get_pin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lla_exti.o(.text.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTX_IRQHandler
</UL>

<P><STRONG><a name="[26e]"></a>get_best_clk_div</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lla_pwm.o(.text.get_best_clk_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_best_clk_div &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[150]"></a>timer3_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lla_pwm.o(.text.timer3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = timer3_init &rArr; get_best_clk_div &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode23_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_SetValidPeriod
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_Run
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_Cnt16Set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_ARRSet
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearAllIntFlag
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_best_clk_div
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_PWM_BaseHZ
</UL>

<P><STRONG><a name="[17d]"></a>TIMERx_Handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lla_timer.o(.text.TIMERx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMERx_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lla_uart.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[169]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lla_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[168]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lla_uart.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
</UL>

<P><STRONG><a name="[15f]"></a>get_uart</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lla_uart.o(.text.get_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = get_uart &rArr;  LLA_errorCode_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_errorCode_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Printf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAA_errorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_WriteBuffer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLA_UART_DeInit
</UL>

<P><STRONG><a name="[17b]"></a>_SysctrlUnlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(.text._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[6c]"></a>_GLOBAL__sub_I_HardwareSerial.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hardwareserial.o(.text._GLOBAL__sub_I_HardwareSerial.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GLOBAL__sub_I_HardwareSerial.cpp &rArr; __cxx_global_var_init.1 &rArr; HardwareSerial::HardwareSerial__sub_object(UART_name_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[193]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwareserial.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxx_global_var_init &rArr; HardwareSerial::HardwareSerial__sub_object(UART_name_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial__sub_object(UART_name_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_HardwareSerial.cpp
</UL>

<P><STRONG><a name="[194]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardwareserial.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxx_global_var_init.1 &rArr; HardwareSerial::HardwareSerial__sub_object(UART_name_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial__sub_object(UART_name_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_HardwareSerial.cpp
</UL>

<P><STRONG><a name="[6d]"></a>_GLOBAL__sub_I_IPAddress.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ipaddress.o(.text._GLOBAL__sub_I_IPAddress.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_IPAddress.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.init_array)
</UL>
<P><STRONG><a name="[195]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ipaddress.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_IPAddress.cpp
</UL>

<P><STRONG><a name="[6e]"></a>_GLOBAL__sub_I_Wire.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wire.o(.text._GLOBAL__sub_I_Wire.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_Wire.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[19b]"></a>__cxx_global_var_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wire.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire__sub_object(unsigned char, unsigned char, unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Wire.cpp
</UL>

<P><STRONG><a name="[6f]"></a>_GLOBAL__sub_I_w5100.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5100.o(.text._GLOBAL__sub_I_w5100.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_w5100.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5100.o(.init_array)
</UL>
<P><STRONG><a name="[19f]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, w5100.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_w5100.cpp
</UL>

<P><STRONG><a name="[70]"></a>_GLOBAL__sub_I_Dhcp.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dhcp.o(.text._GLOBAL__sub_I_Dhcp.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_Dhcp.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(.init_array)
</UL>
<P><STRONG><a name="[18c]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dhcp.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Dhcp.cpp
</UL>

<P><STRONG><a name="[71]"></a>_GLOBAL__sub_I_Dns.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(.text._GLOBAL__sub_I_Dns.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_Dns.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(.init_array)
</UL>
<P><STRONG><a name="[18d]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dns.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Dns.cpp
</UL>

<P><STRONG><a name="[72]"></a>_GLOBAL__sub_I_Ethernet.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(.text._GLOBAL__sub_I_Ethernet.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_Ethernet.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet.o(.init_array)
</UL>
<P><STRONG><a name="[18e]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernet.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ethernet.cpp
</UL>

<P><STRONG><a name="[18f]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ethernet.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxx_global_var_init.1 &rArr; IPAddress::IPAddress()
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Ethernet.cpp
</UL>

<P><STRONG><a name="[73]"></a>_GLOBAL__sub_I_EthernetClient.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetclient.o(.text._GLOBAL__sub_I_EthernetClient.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_EthernetClient.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.init_array)
</UL>
<P><STRONG><a name="[190]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernetclient.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_EthernetClient.cpp
</UL>

<P><STRONG><a name="[74]"></a>_GLOBAL__sub_I_EthernetServer.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetserver.o(.text._GLOBAL__sub_I_EthernetServer.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_EthernetServer.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetserver.o(.init_array)
</UL>
<P><STRONG><a name="[191]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernetserver.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_EthernetServer.cpp
</UL>

<P><STRONG><a name="[75]"></a>_GLOBAL__sub_I_EthernetUdp.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetudp.o(.text._GLOBAL__sub_I_EthernetUdp.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_EthernetUdp.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetudp.o(.init_array)
</UL>
<P><STRONG><a name="[192]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernetudp.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_EthernetUdp.cpp
</UL>

<P><STRONG><a name="[76]"></a>_GLOBAL__sub_I_socket.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, socket.o(.text._GLOBAL__sub_I_socket.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_socket.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> socket.o(.init_array)
</UL>
<P><STRONG><a name="[19e]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, socket.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_socket.cpp
</UL>

<P><STRONG><a name="[269]"></a>_sleep_response_timeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus.o(.text._sleep_response_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _sleep_response_timeout &rArr; delay &rArr; LLA_SYS_Time_DelayMS &rArr; LLA_SYS_Time_ConsumeMillis
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_exception
</UL>

<P><STRONG><a name="[275]"></a>response_exception</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, modbus.o(.text.response_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = response_exception &rArr; modbus_flush &rArr; Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_flush
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_response_timeout
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
</UL>

<P><STRONG><a name="[274]"></a>response_io_status</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, modbus.o(.text.response_io_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = response_io_status
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
</UL>

<P><STRONG><a name="[276]"></a>send_msg</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, modbus.o(.text.send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = send_msg &rArr; modbus_flush &rArr; Debug_printf &rArr; Arduino_DebugUtils::print(int, const char*, ...) &rArr; Arduino_DebugUtils::printTimestamp() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_printf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_flush
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_connect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_close
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_error_print
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_response_timeout
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reply
</UL>

<P><STRONG><a name="[77]"></a>_GLOBAL__sub_I_modbus_tcp.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbus-tcp.o(.text._GLOBAL__sub_I_modbus_tcp.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_modbus_tcp.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus-tcp.o(.init_array)
</UL>
<P><STRONG><a name="[19d]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbus-tcp.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_modbus_tcp.cpp
</UL>

<P><STRONG><a name="[78]"></a>_GLOBAL__sub_I_ModbusRTUClient.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbusrtuclient.o(.text._GLOBAL__sub_I_ModbusRTUClient.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_ModbusRTUClient.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusrtuclient.o(.init_array)
</UL>
<P><STRONG><a name="[196]"></a>__cxx_global_var_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, modbusrtuclient.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUClientClass::ModbusRTUClientClass__sub_object()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ModbusRTUClient.cpp
</UL>

<P><STRONG><a name="[79]"></a>_GLOBAL__sub_I_ModbusRTUServer.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbusrtuserver.o(.text._GLOBAL__sub_I_ModbusRTUServer.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _GLOBAL__sub_I_ModbusRTUServer.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusrtuserver.o(.init_array)
</UL>
<P><STRONG><a name="[197]"></a>__cxx_global_var_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, modbusrtuserver.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRTUServerClass::ModbusRTUServerClass__sub_object()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ModbusRTUServer.cpp
</UL>

<P><STRONG><a name="[7a]"></a>_GLOBAL__sub_I_ModbusTCPClient.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbustcpclient.o(.text._GLOBAL__sub_I_ModbusTCPClient.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_ModbusTCPClient.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbustcpclient.o(.init_array)
</UL>
<P><STRONG><a name="[198]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbustcpclient.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ModbusTCPClient.cpp
</UL>

<P><STRONG><a name="[7b]"></a>_GLOBAL__sub_I_ModbusTCPServer.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modbustcpserver.o(.text._GLOBAL__sub_I_ModbusTCPServer.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_ModbusTCPServer.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbustcpserver.o(.init_array)
</UL>
<P><STRONG><a name="[199]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modbustcpserver.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ModbusTCPServer.cpp
</UL>

<P><STRONG><a name="[7c]"></a>_GLOBAL__sub_I_Adafruit_MQTT_Client.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adafruit_mqtt_client.o(.text._GLOBAL__sub_I_Adafruit_MQTT_Client.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_Adafruit_MQTT_Client.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_mqtt_client.o(.init_array)
</UL>
<P><STRONG><a name="[18b]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, adafruit_mqtt_client.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Adafruit_MQTT_Client.cpp
</UL>

<P><STRONG><a name="[7d]"></a>_GLOBAL__sub_I_NTPClient.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ntpclient.o(.text._GLOBAL__sub_I_NTPClient.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GLOBAL__sub_I_NTPClient.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntpclient.o(.init_array)
</UL>
<P><STRONG><a name="[19a]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ntpclient.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_NTPClient.cpp
</UL>

<P><STRONG><a name="[26c]"></a>stderr_putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text.stderr_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[26b]"></a>stdout_putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text.stdout_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[e1]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e0]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[290]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[28e]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[f5]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[111]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[12d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ff]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[10d]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
